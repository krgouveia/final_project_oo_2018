/*!
 *  \file 		graphics.c
 *  \brief		Implementação dos artifícios gráficos tais como fontes e imagens utilizadas no projeto.
 *  \author		Kleber Reis Gouveia Júnior
 */

//Includes
#include "graphics.h"

//Constantes
/*! Lookup Table contendo caracteres 7x8 imprimíveis (entre " " e "~") em Times New Human no padrão ASCII.*/
const char times8 [95*7]={
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (Space)
 0x00, 0x00, 0x0E, 0xBE, 0x00, 0x00, 0x00, // !
 0x00, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x00, // "
 0x00, 0xE8, 0x3E, 0xE8, 0x3E, 0x28, 0x00, // #
 0x00, 0x4C, 0x9A, 0xFF, 0xB2, 0x64, 0x00, // $
 0x06, 0x89, 0x66, 0x18, 0x66, 0x91, 0x60, // %
 0x60, 0xF0, 0x9C, 0xB2, 0x4C, 0xB0, 0x90, // &
 0x00, 0x00, 0x0C, 0x0A, 0x00, 0x00, 0x00, // '
 0x00, 0x00, 0x3C, 0x7E, 0xC3, 0x00, 0x00, // (
 0x00, 0x00, 0xC3, 0x7E, 0x3C, 0x00, 0x00, // )
 0x00, 0x00, 0x14, 0x0E, 0x14, 0x00, 0x00, // *
 0x00, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x00, // +
 0x00, 0x00, 0x00, 0x50, 0x30, 0x00, 0x00, // ,
 0x00, 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, // -
 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // .
 0x00, 0x00, 0xC0, 0x38, 0x06, 0x00, 0x00, // /
 0x00, 0x7E, 0xFF, 0x81, 0xFF, 0x7E, 0x00, // 0
 0x00, 0x00, 0x82, 0xFF, 0xFF, 0x80, 0x00, // 1
 0x00, 0x86, 0xE3, 0xE3, 0xDF, 0xC6, 0x00, // 2
 0x00, 0x42, 0x81, 0x89, 0xFF, 0x76, 0x00, // 3
 0x00, 0x30, 0x28, 0x24, 0xFE, 0xFF, 0x20, // 4
 0x00, 0xD8, 0xDF, 0x9B, 0x5B, 0x31, 0x00, // 5
 0x00, 0x78, 0xFE, 0x8A, 0xF9, 0x71, 0x00, // 6
 0x00, 0x03, 0x03, 0xE3, 0x1F, 0x03, 0x00, // 7
 0x00, 0x66, 0xFF, 0x99, 0xFF, 0x66, 0x00, // 8
 0x00, 0x8E, 0x9F, 0x51, 0x7F, 0x1E, 0x00, // 9
 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, // :
 0x00, 0x00, 0x00, 0xA4, 0x60, 0x00, 0x00, // :
 0x00, 0x10, 0x28, 0x28, 0x44, 0x00, 0x00, // <
 0x00, 0x00, 0x28, 0x28, 0x28, 0x00, 0x00, // =
 0x00, 0x00, 0x44, 0x28, 0x28, 0x10, 0x00, // >
 0x00, 0x00, 0x06, 0xA2, 0x1E, 0x0C, 0x00, // ?
 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA6, 0x5C, // @
 0x80, 0xE0, 0x98, 0x17, 0x9F, 0xFC, 0xE0, // A
 0x81, 0xFF, 0xFF, 0x89, 0x89, 0xFF, 0x76, // B
 0x3C, 0x7E, 0xC3, 0x81, 0x81, 0x82, 0x47, // C
 0x81, 0xFF, 0xFF, 0x81, 0xC3, 0x7E, 0x3C, // D
 0x81, 0xFF, 0xFF, 0x89, 0x9D, 0xC3, 0x00, // E
 0x81, 0xFF, 0xFF, 0x89, 0x1D, 0x03, 0x00, // F
 0x3C, 0x7E, 0xC3, 0xA1, 0xE2, 0x67, 0x20, // G
 0x81, 0xFF, 0xFF, 0x08, 0xFF, 0xFF, 0x81, // H
 0x00, 0x81, 0xFF, 0xFF, 0x81, 0x00, 0x00, // I
 0x60, 0xE0, 0x81, 0xFF, 0x7F, 0x01, 0x00, // J
 0x81, 0xFF, 0xFF, 0x99, 0x3C, 0xE3, 0xC1, // K
 0x81, 0xFF, 0xFF, 0x81, 0x80, 0xC0, 0xE0, // L
 0xFF, 0x87, 0x1C, 0x30, 0x8C, 0xFF, 0xFF, // M
 0x80, 0xFF, 0x86, 0x1C, 0x71, 0xFF, 0x01, // N
 0x3C, 0x7E, 0xC3, 0x81, 0xC3, 0x7E, 0x3C, // O
 0x81, 0xFF, 0xFF, 0x91, 0x11, 0x1F, 0x0E, // P
 0x3C, 0x7E, 0xC3, 0xE1, 0xC3, 0xFE, 0xBC, // Q
 0x81, 0xFF, 0xFF, 0x89, 0x39, 0xF7, 0xC6, // R
 0x00, 0xCE, 0x5F, 0x99, 0xFA, 0x73, 0x00, // S
 0x03, 0x81, 0xFF, 0xFF, 0x81, 0x03, 0x00, // T
 0x01, 0x7F, 0xFF, 0x81, 0x80, 0x81, 0x7F, // U
 0x01, 0x07, 0x3F, 0xF9, 0xC0, 0x39, 0x07, // V
 0x3F, 0xFF, 0x31, 0x0C, 0x38, 0xE1, 0x3F, // W
 0x81, 0xC3, 0xAF, 0x3D, 0xF4, 0xC3, 0x81, // X
 0x01, 0x03, 0x8F, 0xFD, 0xF0, 0x8D, 0x03, // Y
 0x80, 0xC7, 0xF1, 0xBD, 0x8F, 0xC3, 0xE1, // Z
 0x00, 0x00, 0xFF, 0xFF, 0x81, 0x00, 0x00, // [
 0x00, 0x00, 0x06, 0x38, 0xC0, 0x00, 0x00, /* \     */
 0x00, 0x00, 0x81, 0xFF, 0xFF, 0x00, 0x00, // ]
 0x00, 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, // ^
 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, // _
 0x00, 0x00, 0x00, 0x0A, 0x06, 0x00, 0x00, // '
 0x50, 0xE8, 0xA8, 0xF8, 0xF0, 0x80, 0x00, // a
 0x01, 0xFF, 0x7F, 0x88, 0xF8, 0x70, 0x00, // b
 0x00, 0x70, 0xF8, 0x88, 0x98, 0x00, 0x00, // c
 0x70, 0xF8, 0x89, 0xFF, 0xFF, 0x80, 0x00, // d
 0x00, 0x70, 0xF8, 0xA8, 0xB8, 0xB0, 0x00, // e
 0x00, 0x88, 0xFE, 0xFF, 0x89, 0x03, 0x00, // f
 0x54, 0xFE, 0xAA, 0xAE, 0xE6, 0x62, 0x00, // g
 0x81, 0xFF, 0xFF, 0x08, 0xF8, 0xF0, 0x80, // h
 0x00, 0x00, 0x88, 0xFB, 0xFB, 0x80, 0x00, // i
 0x00, 0xC0, 0x84, 0xFD, 0x7D, 0x00, 0x00, // j
 0x81, 0xFF, 0xFF, 0x10, 0xF8, 0xE8, 0x88, // k
 0x00, 0x00, 0x81, 0xFF, 0xFF, 0x80, 0x00, // l
 0x88, 0xF8, 0xF8, 0x08, 0xF0, 0x08, 0xF0, // m
 0x88, 0xF8, 0xF8, 0x08, 0xF8, 0xF0, 0x80, // n
 0x00, 0x70, 0xF8, 0x88, 0xF8, 0x70, 0x00, // o
 0x82, 0xFE, 0xFE, 0xA2, 0x3E, 0x1C, 0x00, // p
 0x00, 0x1C, 0x3E, 0xA2, 0xFC, 0xFE, 0x80, // q
 0x00, 0x88, 0xF8, 0xF8, 0x88, 0x18, 0x00, // r
 0x00, 0xD0, 0xB8, 0xE8, 0x58, 0x00, 0x00, // s
 0x00, 0x08, 0xF8, 0xFE, 0x88, 0x00, 0x00, // t
 0x08, 0x78, 0xF8, 0x80, 0xF8, 0xF8, 0x80, // u
 0x08, 0x38, 0xF8, 0xC0, 0x38, 0x08, 0x00, // v
 0x08, 0x38, 0xF8, 0xC0, 0x38, 0xC0, 0x38, // w
 0x88, 0x98, 0x78, 0xF0, 0xC8, 0x88, 0x00, // x
 0xC2, 0x8E, 0x7E, 0x18, 0x06, 0x02, 0x00, // y
 0x00, 0x88, 0xE8, 0xF8, 0xB8, 0x88, 0x00, // z
 0x00, 0x08, 0x76, 0xF7, 0x81, 0x00, 0x00, // {
 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, // |
 0x00, 0x00, 0x81, 0xF7, 0x76, 0x08, 0x00, // }
 0x00, 0x0C, 0x04, 0x08, 0x0C, 0x00, 0x00, // ~
};

/**
 * Escreve um caractere (letter) de tamanho 7x8 pixels defino pela matriz *alphabet.
 * @param *alphabet Matriz que define o tipo de fonte utilizada.
 * @param letter Caractere a ser escrito.
 */
void LCDWriteChar7x8(const char *alphabet, char letter)
{
	char i;

	for(i=0;i<7;i++)
	{
		LCDWrite(DATA, alphabet[(letter-0x20)*7+i]);
	}
}

/**
 * Escreve uma string (*string) de caracteres de tamanho 7x8 pixels defino pela matriz *alphabet.
 * @param *alphabet Matriz que define o tipo de fonte utilizada.
 * @param *string String a ser escrita.
 */
void LCDWriteString(const char *alphabet, unsigned char *string)
{
	int i=0;
	while(string[i]!= 0x00)
	{
		LCDWriteChar7x8(alphabet, string[i]);
		i++;
	}
}

/**
 * Coloca no LCD uma imagem (matrix) de tamanho MAX_COL+1 x MAX_PAGE+1 alinhada na posição 0,0 no LCD.
 * @param *matrix ponteiro para a matriz que contem a imagem.
 */
void LCDRefreshMatrix(const char* matrix)
{
  char i=0,j=0;

  LCDSetColumn(0);
  LCDSetPage(0);

  for(j=0;j<=MAX_PAGE;j++)
  {
    LCDSetPage(j);
    LCDSetColumn(0);

    for(i=0;i<=MAX_COL;i++)
    {
      LCDWrite(DATA, matrix[i+(MAX_COL+1)*j]);
    }
  }
}
