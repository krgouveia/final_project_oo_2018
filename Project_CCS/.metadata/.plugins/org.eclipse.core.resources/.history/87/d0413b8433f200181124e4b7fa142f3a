
#include "LCD_UC.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "inc/hw_memmap.h"
#include "LCD_NHDC12864.h"
#include <string>
using namespace std;

CLCD::CLCD()
{
	//--GPIO PORTA
    // Enable and wait for the port to be ready for access
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOA));
	// Configure the GPIO port for outputs.
    GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE, LCD_D0|LCD_D1|LCD_D2|LCD_D3|LCD_D4|LCD_D5);
    // Configure GPIO driver strength and pull-ups
    GPIOPadConfigSet(GPIO_PORTA_BASE, LCD_D0|LCD_D1|LCD_D2|LCD_D3|LCD_D4|LCD_D5, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD);
	
	//--GPIO PORTB
    // Enable and wait for the port to be ready for access
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOB));
	// Configure the GPIO port for outputs.
    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, LCD_A0|LCD_RD|LCD_D6);
    // Configure GPIO driver strength and pull-ups
    GPIOPadConfigSet(GPIO_PORTB_BASE, LCD_A0|LCD_RD|LCD_D6, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD);

	//--GPIO PORTE
    // Enable and wait for the port to be ready for access
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOE));
	// Configure the GPIO port for outputs.
    GPIOPinTypeGPIOOutput(GPIO_PORTE_BASE, LCD_WR|LCD_D7);
    // Configure GPIO driver strength and pull-ups
    GPIOPadConfigSet(GPIO_PORTE_BASE, LCD_WR|LCD_D7, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD);

    LCDInitializeNHDC12864();
    LCDSetPage(0);
    LCDSetColumn(0);
}

CLCD::~CLCD()
{

}

void CLCD::clearScreen()
{
	LCDClear();
}

void CLCD::writeString(string str)
{
    string auxS2 = "teste";
    string auxS = str;
    char auxC = *str[0];
    char aux[30];
    int n = str.size();
	char* cstr = new char (n + 1);
	
	str.copy(cstr, n + 1);
	cstr[n] = 0;
	
	aux[0] = cstr[0];
	aux[1] = cstr[1];
	aux[2] = cstr[2];
	aux[3] = cstr[3];
	aux[4] = cstr[4];
	aux[5] = cstr[5];
	aux[6] = cstr[6];
	aux[7] = cstr[7];
	aux[8] = cstr[8];
	aux[9] = cstr[9];
	aux[10] = cstr[10];
	aux[11] = cstr[11];
	aux[12] = cstr[12];
	aux[13] = cstr[13];
	aux[14] = cstr[14];
	aux[15] = cstr[15];
	aux[16] = cstr[16];
	aux[17] = cstr[17];
	aux[18] = cstr[18];
	aux[19] = cstr[19];
	aux[20] = cstr[20];
	aux[21] = cstr[21];
	aux[22] = cstr[22];

	LCDWriteString(times8,cstr);
	delete cstr;
}

void CLCD::writeInteger(int num)
{

}

void CLCD::setPosition(int x, int y)
{
	LCDSetPage(y);
	LCDSetColumn(x);
}
